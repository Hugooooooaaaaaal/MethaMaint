import admin from "firebase-admin";
import { faker } from "@faker-js/faker"; // faker en ESM
import { initializeApp, applicationDefault } from "firebase-admin/app";
import { getFirestore } from "firebase-admin/firestore";
import { readFileSync } from "fs";
import { collection, getDocs, doc, setDoc, addDoc } from "firebase/firestore";

const serviceAccount = JSON.parse(
  readFileSync("./service-account.json", "utf8")
);

const app = initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const db = getFirestore(app);

// for (const i of [...Array(10).keys()]) {
//   db.collection("equipements").add({
//     num_intervention: faker.number.bigInt({ min: 10n, max: 100n }),

//   });
// }

//DATA

let nb_interventions = 10;
let nb_gammes = 5;

const db_installations = [
  {
    REFERENCE: "0001",
    CODE: "0001",
    NOM: "Villedieu",
    DESCRIPTION: "Site de production principal",
  },

  // Pr√©traitement
  {
    REFERENCE: "30",
    CODE: "0001-0030",
    NOM: "Pr√©traitement",
    DESCRIPTION: "Premi√®re √©tape de transformation des d√©chets",
  },
  {
    REFERENCE: "301",
    CODE: "0001-0030-0301",
    NOM: "Tr√©mie d'alimentation",
    DESCRIPTION: "R√©ception et stockage temporaire des d√©chets entrants",
  },
  {
    REFERENCE: "302",
    CODE: "0001-0030-0302",
    NOM: "D√©chiqueteur industriel",
    DESCRIPTION: "Broie les d√©chets en petits morceaux",
  },
  {
    REFERENCE: "303",
    CODE: "0001-0030-0303",
    NOM: "Convoyeur de transfert",
    DESCRIPTION: "Transporte les d√©chets broy√©s vers la s√©paration",
  },

  // S√©paration des mat√©riaux
  {
    REFERENCE: "40",
    CODE: "0001-0040",
    NOM: "S√©paration des mat√©riaux",
    DESCRIPTION: "Tri des diff√©rents types de mat√©riaux",
  },
  {
    REFERENCE: "401",
    CODE: "0001-0040-0401",
    NOM: "S√©parateur magn√©tique",
    DESCRIPTION: "S√©pare les m√©taux ferreux des autres d√©chets",
  },
  {
    REFERENCE: "402",
    CODE: "0001-0040-0402",
    NOM: "S√©parateur √† air",
    DESCRIPTION: "S√©pare les mati√®res l√©g√®res par flux d'air",
  },
  {
    REFERENCE: "403",
    CODE: "0001-0040-0403",
    NOM: "Table vibrante",
    DESCRIPTION: "Classe les d√©chets selon leur densit√©",
  },

  // Broyeur final
  {
    REFERENCE: "50",
    CODE: "0001-0050",
    NOM: "Broyeur final",
    DESCRIPTION: "R√©duction finale des d√©chets",
  },
  {
    REFERENCE: "501",
    CODE: "0001-0050-0501",
    NOM: "Broyeur √† marteaux",
    DESCRIPTION: "R√©duit la taille des mat√©riaux",
  },
  {
    REFERENCE: "502",
    CODE: "0001-0050-0502",
    NOM: "Syst√®me de refroidissement",
    DESCRIPTION: "√âvite la surchauffe du broyeur",
  },
  {
    REFERENCE: "503",
    CODE: "0001-0050-0503",
    NOM: "Filtre √† particules",
    DESCRIPTION: "Capture les fines poussi√®res g√©n√©r√©es",
  },

  // Stockage et exp√©dition
  {
    REFERENCE: "60",
    CODE: "0001-0060",
    NOM: "Stockage et exp√©dition",
    DESCRIPTION: "Stockage des mat√©riaux tri√©s",
  },
  {
    REFERENCE: "601",
    CODE: "0001-0060-0601",
    NOM: "Silos de stockage",
    DESCRIPTION: "Stockage temporaire avant exp√©dition",
  },
  {
    REFERENCE: "602",
    CODE: "0001-0060-0602",
    NOM: "Station de chargement",
    DESCRIPTION: "Chargement des camions pour exp√©dition",
  },

  // √âquipements sp√©cifiques (sous-composants)
  {
    REFERENCE: "M-30101",
    CODE: "0001-0030-0301-0001",
    NOM: "Moteur du d√©chiqueteur",
    DESCRIPTION: "Fournit la puissance pour le broyage",
  },
  {
    REFERENCE: "C-30302",
    CODE: "0001-0030-0303-0002",
    NOM: "Convoyeur de sortie",
    DESCRIPTION: "√âvacue les d√©chets broy√©s",
  },
  {
    REFERENCE: "S-40201",
    CODE: "0001-0040-0402-0001",
    NOM: "Ventilateur haute pression",
    DESCRIPTION: "Assure le flux d‚Äôair pour la s√©paration",
  },
  {
    REFERENCE: "B-50101",
    CODE: "0001-0050-0501-0001",
    NOM: "Lames du broyeur",
    DESCRIPTION: "Coupe et r√©duit les d√©chets",
  },
  {
    REFERENCE: "T-60201",
    CODE: "0001-0060-0602-0001",
    NOM: "Borne de pes√©e",
    DESCRIPTION: "Contr√¥le le poids avant exp√©dition",
  },
];
const db_nature = [
  "D√©pannage",
  "Pr√©ventif",
  "Suite Pr√©ventif",
  "Am√©lioration/Modification",
  "Pr√©dictif",
];

const db_priorite = [
  "P1-Urgent",
  "P2-Dans la semaine",
  "P3-Dans le mois",
  "P4-Dans les 3 mois",
  "P5-Dans les 6 mois",
];

const db_cause = [
  "Op√©rationnelle",
  "M√©canique",
  "Electrique",
  "Automatisme",
  "Instruments",
];
const db_statut = [
  "En Pr√©paration",
  "En Attente R√©alisation",
  "En Cours",
  "Termin√©e",
  "Annul√©e",
];

let installationIds = [];
let installation_libelles = [];
let interventionIds = [];
let gammeIds = [];

//SUPPRESSION
async function deleteAllDocuments(listeIds, collectionName) {
  const snapshot = await db.collection(collectionName).get(); // R√©cup√©rer tous les documents
  const batch = db.batch(); // Utilisation d'un batch pour optimiser

  snapshot.forEach((doc) => {
    batch.delete(doc.ref); // Supprimer chaque document
  });

  await batch.commit(); // Appliquer les suppressions
  console.log(`Tous les documents de "${collectionName}" ont √©t√© supprim√©s.`);
}

//RECUPERATION IDs
async function getAllIDs(collectionName) {
  let listeIds = [];
  const snapshot = await db.collection(collectionName).get(); // R√©cup√©rer tous les documents

  snapshot.forEach((doc) => {
    listeIds.push(doc.id); // Supprimer chaque document
  });
  console.log(listeIds);
  return listeIds;
}

//CREATION
async function generateInstallations() {
  console.log("Installations : ");

  for (const installation of db_installations) {
    try {
      //   const docRef = await addDoc(collection(db, "installations"),
      db.collection("installations").add({
        libelle: installation.REFERENCE + "_" + installation.NOM,
        reference: installation.REFERENCE,
        code: installation.CODE,
        nom: installation.NOM,
        description: installation.DESCRIPTION,
        date_ajout: faker.date.recent({ days: 30 }), // Date al√©atoire r√©cente
      });
    } catch (error) {
      console.error(
        `‚ùå Erreur lors de l'ajout de "${installation.NOM}"`,
        error
      );
      console.error(`üîç D√©tails de l'erreur: ${error.stack}`);
      process.exit(1);
    }
  }

  console.log("Installations ajout√©es avec succ√®s !");
  console.log("IDs des documents cr√©√©s :", installationIds);
  getAllIDs(installationIds, "installations");
}

async function generateInterventions() {
  console.log("Interventions : ");
  for (let i = 0; i < nb_interventions; i++) {
    try {
      db.collection("interventions").add({
        num_intervention: faker.number.int({ min: 10000, max: 99999 }),
        titre: faker.hacker.phrase(),
        statut: faker.helpers.arrayElement(db_statut),
        date: faker.date.recent({ days: 30 }),
        installation: db.doc(
          `/installations/${faker.helpers.arrayElement(installationIds)}`
        ),
        nature: faker.helpers.arrayElement(db_nature),
        priorite: faker.helpers.arrayElement(db_priorite),
        cause: faker.helpers.arrayElement(db_cause),
        details: faker.lorem.sentence(),
        temps_intervention: faker.number.int({ min: 10, max: 480 }),
        gamme: db.doc(`/gammes/${faker.helpers.arrayElement(gammeIds)}`),
      });
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'ajout `, error);
      console.error(`üîç D√©tails de l'erreur: ${error.stack}`);
      process.exit(1);
    }
  }

  console.log("Interventions ajout√©es avec succ√®s !");
  console.log("IDs des documents cr√©√©s:", interventionIds);
}

async function generateGammes() {
  console.log("Gammes : ");
  console.log(installationIds);
  let installationIds = getAllIDs("installations");
  for (let i = 0; i < nb_gammes; i++) {
    try {
      await db.collection("interventions").add({
        num_gamme: faker.number.int({ min: 10000, max: 99999 }),
        titre: faker.hacker.phrase(),
        statut: faker.helpers.arrayElement(db_statut),
        date: faker.date.recent({ days: 30 }),
        installation: db.doc(
          `/installations/${faker.helpers.arrayElement(installationIds)}`
        ),
        nature: faker.helpers.arrayElement(db_nature),
        priorite: faker.helpers.arrayElement(db_priorite),
        cause: faker.helpers.arrayElement(db_cause),
        details: faker.lorem.sentence(),
        temps_intervention: faker.number.int({ min: 10, max: 480 }),
        date_debut: faker.date.recent({ days: 30 }),
        date_fin: faker.date.recent({ days: 30 }),
        periodicite: faker.number.int({ min: 1, max: 1000 }),
      });
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'ajout `, error);
      console.error(`üîç D√©tails de l'erreur: ${error.stack}`);
      process.exit(1);
    }
  }

  console.log("Interventions ajout√©es avec succ√®s !");
  console.log("IDs des documents cr√©√©s:", interventionIds);
  getAllIDs(gammeIds, "gammes");
}

function delete_all() {
  deleteAllDocuments("installations");
  deleteAllDocuments("interventions");
  deleteAllDocuments("gammes");
}

function create_all() {
  generateInstallations();
  //   generateGammes();
  //   generateInterventions();
}

getAllIDs(installationIds, "installations");
generateGammes();
